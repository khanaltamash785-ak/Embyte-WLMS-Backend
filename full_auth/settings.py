"""
Django settings for full_auth project. 

Generated by 'django-admin startproject' using Django 4.2.1.
"""
 
import os
import sys
import dj_database_url
from os import getenv, path
from pathlib import Path
from django.core.management.utils import get_random_secret_key
import dotenv
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_file = BASE_DIR / '.env.local'

if path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

DEVELOPMENT_MODE = getenv('DEVELOPMENT_MODE', 'False') == 'True'

# Quick-start development settings - unsuitable for production
SECRET_KEY = getenv('DJANGO_SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv('DEBUG', 'False') == 'True'

# ALLOWED_HOSTS = getenv('DJANGO_ALLOWED_HOSTS',
#                        '3.7.22.83,localhost,127.0.0.1,ilead.suryodaybank.com').split(',')

if DEVELOPMENT_MODE:
    ALLOWED_HOSTS = ['*']  # Allow all hosts for development

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'djoser',
    'storages',
    'social_django',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Move CORS middleware to top
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'full_auth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
] 

WSGI_APPLICATION = 'full_auth.wsgi.application'

if DEVELOPMENT_MODE is True:
    # Check if MySQL configuration is provided
    if getenv('MYSQL_DATABASE'):

        mysql_host = '127.0.0.1' 
        
        mysql_port = '3307'  # Default SSH tunnel port
        use_tunnel = False

        # Only create SSH tunnel if SSH configuration is provided and complete
        if getenv('SSH_HOST') and getenv('SSH_PRIVATE_KEY_PATH'):
            try:
                print("🔧 Setting up SSH tunnel for database connection...")
                from .db_tunnel import db_tunnel
                tunnel = db_tunnel.create_tunnel()

                if tunnel and tunnel.is_alive:
                    mysql_host = '127.0.0.1'
                    mysql_port = '3307'
                    use_tunnel = True
                    print("✅ SSH tunnel established successfully")
                    print(f"   Local: {mysql_host}:{mysql_port}")
                    print(
                        f"   Remote: emcure.cyfg4jtdu8bn.ap-south-1.rds.amazonaws.com:3306")
                else:
                    raise Exception("SSH tunnel failed to start")

            except Exception as e:
                print(f"❌ SSH tunnel failed: {e}")
                print("🔄 Falling back to direct connection...")
                # Fallback to direct connection
                mysql_host = getenv(
                    'MYSQL_HOST_DIRECT', 'emcure.cyfg4jtdu8bn.ap-south-1.rds.amazonaws.com')
                mysql_port = getenv('MYSQL_PORT_DIRECT', '3306')
                use_tunnel = False
                print(
                    f"🔗 Using direct database connection: {mysql_host}:{mysql_port}")
        else:
            # Direct connection without SSH tunnel
            mysql_host = getenv(
                'MYSQL_HOST_DIRECT', 'emcure.cyfg4jtdu8bn.ap-south-1.rds.amazonaws.com')
            mysql_port = getenv('MYSQL_PORT_DIRECT', '3306')
            use_tunnel = False
            print(
                f"🔗 Using direct database connection (no SSH config): {mysql_host}:{mysql_port}")

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': getenv('MYSQL_DATABASE'),
                'USER': getenv('MYSQL_USER'),
                'PASSWORD': getenv('MYSQL_PASSWORD'),
                'HOST': mysql_host,
                'PORT': mysql_port,
                'OPTIONS': {
                    'sql_mode': 'traditional',
                    'charset': 'utf8mb4',
                    'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                    'connect_timeout': 60,
                    'read_timeout': 60,
                    'write_timeout': 60,
                },
                'CONN_MAX_AGE': 300,
            }
        }

        print(f"📊 Database Configuration:")
        print(f"   Engine: MySQL")
        print(f"   Host: {mysql_host}")
        print(f"   Port: {mysql_port}")
        print(f"   Database: {getenv('MYSQL_DATABASE')}")
        print(f"   User: {getenv('MYSQL_USER')}")
        print(f"   Using SSH Tunnel: {use_tunnel}")

    else:
        # Fallback to SQLite if MySQL not configured
        print("📊 Using SQLite database (MySQL not configured)")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
elif len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
    if getenv('DATABASE_URL', None) is None:
        raise Exception('DATABASE_URL environment variable not defined')
    DATABASES = {
        'default': dj_database_url.parse(getenv('DATABASE_URL')),
    }

# Email settings
EMAIL_BACKEND = 'django_ses.SESBackend'
DEFAULT_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')

AWS_SES_ACCESS_KEY_ID = getenv('AWS_SES_ACCESS_KEY_ID')
AWS_SES_SECRET_ACCESS_KEY = getenv('AWS_SES_SECRET_ACCESS_KEY')
AWS_SES_REGION_NAME = getenv('AWS_SES_REGION_NAME')
AWS_SES_REGION_ENDPOINT = f'email.{AWS_SES_REGION_NAME}.amazonaws.com'
AWS_SES_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')

USE_SES_V2 = True

DOMAIN = getenv('DOMAIN')
SITE_NAME = 'Full Auth'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
if DEVELOPMENT_MODE is True:
    FORCE_SCRIPT_NAME = '/django'
    STATIC_URL = '/django/static/'
    STATIC_ROOT = BASE_DIR / 'static'
    MEDIA_URL = '/django/media/'
    MEDIA_ROOT = BASE_DIR / 'media'
    USE_X_FORWARDED_HOST = True

    # Enable detailed logging for development
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': BASE_DIR / 'webhook_debug.log',
                'formatter': 'verbose',
            },
        },
        'loggers': {
            'users.views': {
                'handlers': ['console', 'file'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'users.services.whatsapp_service': {
                'handlers': ['console', 'file'],
                'level': 'DEBUG',
                'propagate': True,
            },
        },
    }
else:
    AWS_S3_ACCESS_KEY_ID = getenv('AWS_S3_ACCESS_KEY_ID')
    AWS_S3_SECRET_ACCESS_KEY = getenv('AWS_S3_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = getenv('AWS_S3_REGION_NAME')
    AWS_S3_ENDPOINT_URL = f'https://{AWS_S3_REGION_NAME}.digitaloceanspaces.com'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400'
    }
    AWS_DEFAULT_ACL = 'public-read'
    AWS_LOCATION = 'static'
    AWS_MEDIA_LOCATION = 'media'
    AWS_S3_CUSTOM_DOMAIN = getenv('AWS_S3_CUSTOM_DOMAIN')
    STORAGES = {
        'default': {'BACKEND': 'custom_storages.CustomS3Boto3Storage'},
        'staticfiles': {'BACKEND': 'storages.backends.s3boto3.S3StaticStorage'}
    }

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'users.authentication.CustomJWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
    'ACTIVATION_URL': 'activation/{uid}/{token}',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_RETYPE': True,
    'TOKEN_MODEL': None,
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': getenv('REDIRECT_URLS').split(',')
}

AUTH_COOKIE = 'access'
AUTH_COOKIE_MAX_AGE = 60 * 60 * 24
AUTH_COOKIE_SECURE = getenv('AUTH_COOKIE_SECURE', 'True') == 'True'
AUTH_COOKIE_HTTP_ONLY = True
AUTH_COOKIE_PATH = '/'
AUTH_COOKIE_SAMESITE = 'None'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = getenv('GOOGLE_AUTH_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = getenv('GOOGLE_AUTH_SECRET_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
    'openid'
]
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['first_name', 'last_name']

SOCIAL_AUTH_FACEBOOK_KEY = getenv('FACEBOOK_AUTH_KEY')
SOCIAL_AUTH_FACEBOOK_SECRET = getenv('FACEBOOK_AUTH_SECRET_KEY')
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'email, first_name, last_name'
}

# CORS Configuration - Fixed conflicting settings
if DEVELOPMENT_MODE:
    # For development - allow all origins
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOW_ALL_HEADERS = True
    CORS_ALLOWED_METHODS = [
        'DELETE',
        'GET',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
    ]
    # Additional CORS settings for development
    CORS_PREFLIGHT_MAX_AGE = 86400
    CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']
else:
    # For production - specific origins only
    CORS_ALLOWED_ORIGINS = [
        "https://ilead.suryodaybank.com",
        "https://ilead.suryodaybank.com",
        "https://player.vdocipher.com",
    ]
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOW_ALL_HEADERS = True
    CORS_ALLOWED_METHODS = [
        'DELETE',
        'GET',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
    ]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'users.UserAccount'

# Twilio WhatsApp Configuration
TWILIO_ACCOUNT_SID = getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = getenv('TWILIO_AUTH_TOKEN')
TWILIO_WHATSAPP_FROM = getenv('TWILIO_WHATSAPP_FROM')



# WhatsApp Template SIDs
WHATSAPP_WELCOME_TEMPLATE_SID = getenv('WHATSAPP_WELCOME_TEMPLATE_SID', '')
WHATSAPP_LANGUAGE_SELECT_TEMPLATE_SID = getenv(
    'WHATSAPP_LANGUAGE_SELECT_TEMPLATE_SID', '')
WHATSAPP_VIDEO_LESSON_TEMPLATE_SID = getenv(
    'WHATSAPP_VIDEO_LESSON_TEMPLATE_SID', '')
WHATSAPP_VIDEO_REWATCH_TEMPLATE_SID = getenv(
    'WHATSAPP_VIDEO_REWATCH_TEMPLATE_SID', '')
WHATSAPP_QUIZ_TEMPLATE_SID = getenv('WHATSAPP_QUIZ_TEMPLATE_SID', '')
WHATSAPP_COURSE_RESUME_TEMPLATE_SID = getenv('WHATSAPP_COURSE_RESUME_TEMPLATE_SID', '')


# Template mapping for different message types
WHATSAPP_TEMPLATE_MAPPING = {
    'welcome_message': getenv('WHATSAPP_WELCOME_TEMPLATE_SID', ''),
    'language_selection': getenv('WHATSAPP_LANGUAGE_SELECT_TEMPLATE_SID', ''),
    'video_lesson': getenv('WHATSAPP_VIDEO_LESSON_TEMPLATE_SID', ''),
    'rewatch_video': getenv('WHATSAPP_VIDEO_REWATCH_TEMPLATE_SID', ''),
    'quiz_question': getenv('WHATSAPP_QUIZ_TEMPLATE_SID', ''),
    'course_resume': getenv('WHATSAPP_COURSE_RESUME_TEMPLATE_SID', ''),  # Add this line
}

# Cache Configuration - Use Redis or database cache for production
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'my_cache_table',
        'TIMEOUT': 7200,
    }
}

# Video security settings
VIDEO_SECURITY_KEY = getenv(
    'VIDEO_SECURITY_KEY', 'your-very-secure-secret-key-change-this-in-production')
SECURE_VIDEO_BASE_URL = getenv('SECURE_VIDEO_BASE_URL', 'api/secure-video')
USE_SECURE_VIDEO = getenv('USE_SECURE_VIDEO', 'False').lower() == 'true'

# CSRF Settings
CSRF_TRUSTED_ORIGINS = [
    'https://ilead.suryodaybank.com',
    'https://ilead.suryodaybank.com',
    'http://127.0.0.1:8000',
    'http://localhost:8000',
]

if DEVELOPMENT_MODE:
    CSRF_TRUSTED_ORIGINS.extend([
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'https://*.ngrok.io',
        'https://*.ngrok-free.app',
    ])

# Allow iframe embedding
X_FRAME_OPTIONS = 'SAMEORIGIN'

# Content Security Policy (if using django-csp)
CSP_FRAME_SRC = [
    'https://player.vdocipher.com',
    'https://*.vdocipher.com',
    'https://vdocipher.com'
]

CSP_SCRIPT_SRC = [
    "'self'",
    "'unsafe-inline'",
    'https://player.vdocipher.com',
]
